{
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }


	"Ionic popover": {
		"prefix": "pop",
		"body": [
			"const popover = await this.popoverCtrl.create({",
				"component: $1,",
				"event: ev,",
				"// cssClass: 'custom-popover'",
			"});",
			"popover.onDidDismiss()",
			".then((res) => {",
			"});",
			"await popover.present();"
		]
	},
	"Ionic toast": {
		"prefix": "toast",
		"body": [
			"async presentToast(message = 'Alert', duration = 2000) {",
				"const toast = await this.toastCtrl.create({",
					"message,",
					"duration",
				"});",
				"toast.present();",
			"}",
		]
	},
	"Ionic loading": {
		"prefix": "loading",
		"body": [
			"private loading;",

			"async presentLoading(message = 'loading data...') {",
					"this.loading = await this.loadingCtrl",
					".create({",
					"//cssClass: '',",
					"message",
				"});",

				"return await this.loading.present();",
			"}",

			"dismissLoading() {",
				"if (this.loading) { this.loading.dismiss(); }",
			"}",
		]
	},
}
