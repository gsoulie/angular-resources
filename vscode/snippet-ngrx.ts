{
	"Actions NgRx": {
		"scope": "javascript, typescript",
		"prefix": "ngrxaction",
		"body": [
			"import { Product } from './../../models/product.model';",
			"import { createActionGroup, props, emptyProps } from '@ngrx/store';",
			"export const Actions = createActionGroup({",
			"\tsource: '$1',",
			"\tevents: {",
			"\t\t'Fetch $1': emptyProps(),",
			"\t\t'Set products': props<{ products: Product[]}>(),",
			"\t\t'Add $1': props<{ payload: $1 }>(),",
			"\t}",
			"});",
		]
	},
	"Reducer NgRx": {
		"scope": "javascript, typescript",
		"prefix": "reducer",
		"body": [
			"import { createReducer, on } from '@ngrx/store/src';",
			"export interface State {",
			"\tproducts: Product[]",
			"}",
			"const initialState: State = {",
			"\tproducts: []",
			"}",
			"export const productReducer = createReducer(",
			"\tinitialState,",
			"\ton(",
			"\t\tProductActions.fetchProducts,",
			"\t\t(state) => ({",
			"\t\t\t...state",
			"\t\t})",
			"\t),",
			"\ton(",
			"\t\tProductActions.setProducts,",
			"\t\t(state, action) => ({",
			"\t\t\t...state,",
			"\t\t\tproducts: action.products",
			"\t\t})",
			"\t),",
			"\ton(",
			"\t\tProductActions.addProduct,",
			"\t\t(state, action) => ({",
			"\t\t\t...state,",
			"\t\t\tproducts: [...state.products, action.payload]",
			"\t\t})",
			"\t),",
			"\ton(",
			"\t\tProductActions.deleteProduct,",
			"\t\t(state, action) => ({",
			"\t\t\t...state,",
			"\t\t\tproducts: state.products.filter(p => p.id !== action.id)",
			"\t\t})",
			"\t),",
			"\ton(",
			"\t\tProductActions.clearCart,",
			"\t\t(state) => ({",
			"\t\t\t...state,",
			"\t\t\tproducts: []",
			"\t\t})",
			"\t)",
			");",
		]
	},
	"Effects NgRx": {
		"scope": "javascript, typescript",
		"prefix": "effects",
		"body": [
			"import { AuthActions } from './auth.actions';",
			"import { Injectable } from '@angular/core';",
			"import { Actions, createEffect, ofType } from '@ngrx/effects';",
			"import { switchMap } from 'rxjs';",
			"\r\n",
			"@Injectable()",
			"export class AuthEffects {",
			"\tconstructor(private actions$: Actions) { }",
			"\r\n",
			"\tsubmitAuth$ = createEffect(() => this.actions$.pipe(",
			"\t\tofType(AuthActions.authSubmit),",
			"\t\tswitchMap(authData => {",
			"\t\t\treturn",
			"\t\t})",
			"\t))",
			"}",
		]
	},
	"App global reducer": {
		"scope": "javascript, typescript",
		"prefix": "reducer global",
		"body": [			
			"import { ActionReducerMap } from '@ngrx/store';",
			"import * as authReducer from './auth.reducer';",
			"\r\n",
			"// définition d'un state global comprenant l'ensemble des sous-state",
			"export interface AppGlobalState {",
			"\tauthState: authReducer.State;",
			"}",
			"\r\n",
			"// Définition du reducer global de l'application",
			"export const globalReducer: ActionReducerMap<AppGlobalState> = {",
			"\tauthState: authReducer.authReducer,",
			"}",
		]
	}
}
